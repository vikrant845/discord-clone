// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String
  imageUrl String
  email String
  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  imageUrl String
  inviteCode String @unique
  members Member[]
  channels Channel[]

  profileId String @db.ObjectId
  profile Profile @relation(fields: [ profileId ], references: [ id ], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [ serverId ], references: [ id ], onDelete: Cascade)

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  messages Message[]

  directmessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  messages Message[]

  profileId String @db.ObjectId
  profile Profile @relation(fields: [ profileId ], references: [ id ], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [ serverId ], references: [ id ], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, serverId])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?
  
  memberId String @db.ObjectId
  member Member @relation(fields: [ memberId ], references: [ id ], onDelete: Cascade)

  channelId String @db.ObjectId
  channel Channel @relation(fields: [ channelId ], references: [ id ], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  directMessages DirectMessage[]

  memberOneId String @db.ObjectId
  memberOne Member @relation("MemberOne", fields: [ memberOneId ], references: [ id ], onDelete: Cascade)

  memberTwoId String @db.ObjectId
  memberTwo Member @relation("MemberTwo", fields: [ memberTwoId ], references: [ id ], onDelete: Cascade)

  @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String

  conversationId String @db.ObjectId
  converstaion Conversation @relation(fields: [ conversationId ], references: [ id ], onDelete: Cascade)

  memberId String @db.ObjectId
  member Member @relation(fields: [ memberId ], references: [ id ], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}